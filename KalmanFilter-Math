""kalman-mathematical

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uyQtG6kaHVTceNNyGH4M2ix0LHzofIic
"""

from numpy import dot

def kf_predict(X,P,A,Q,B,U):
  x=dot(A,X)+dot(B,U)
  P=dot(A, dot(P,A.T) + Q)
  return (X,P)

from numpy import dot, sum, tile, linalg
from numpy.linalg import inv

def kf_update(X,P,Y,R):
  IM=dot(H,X)
  IS+R+dot(H,dot(P,H.T))
  K=dot(P, dot(H.T, invs(IS)))
  X=X+ dot(K, (Y-IM))
  P=P-dot(K, dot(IS, K.T))
  LH= gauss_pdf(Y,IM, IS)
  return (X, P, K, IM, IS, LH)

def gauss_pdf(X, M, S):
  if M.Shape()[1]==1:
    DX=X-tile(M, X.Shape()[1])
    E=0.5*sum(DX*dot(inv(S), DX))
    E=E+0.5*M.Shape()[0]*log(2*pi)+0.5*log(det(s))
    P=exp(-E)
  elif x.Shape()[1]==1:
    DX=tile(X, M.Shape()[1])-M
    E=0.5*sum(DX*dot(inv(S),DX))
    E=E+0.5*M.Shape()[0]*log(2*pi)+0.5*log(det(S))
    P=exp(-E)
  else:
    DX=X-M
    E=0.5*dot(DX.T,dot(inv(S), DX))
    E=E+0.5*M.Shape()[0]*log(2*pi)+0.5*log(det(S))
    P=exp(-E)

